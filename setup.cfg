# This file exists within 'nark':
#
#   https://github.com/tallybark/nark
#
# Copyright © 2018-2020 Landon Bouma, © 2015-2016 Eric Goller.  All rights reserved.
#
# 'nark' is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License  as  published by the Free Software Foundation,
# either version 3  of the License,  or  (at your option)  any   later    version.
#
# 'nark' is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY  or  FITNESS FOR A PARTICULAR
# PURPOSE.  See  the  GNU General Public License  for  more details.
#
# You can find the GNU General Public License reprinted in the file titled 'LICENSE',
# or visit <http://www.gnu.org/licenses/>.

# """Distributable Python application packaging metadata."""

# (lb): Note that using `-` or `_` in key names is interchangeable, e.g.,
#         long-description is the
# same as long_description.

[metadata]
# NOTE: Values specified in setup.py will shadow those here.
#       (Although there are very few values left in setup().)
name = nark
author = Tally Bark LLC
author-email = nark.pypi@tallybark.com
home-page = https://github.com/tallybark/nark
description = Back end framework for journaling and time tracking applications (like `dob`!).
long-description = file: README.rst
long-description-content-type = text/x-rst; charset=UTF-8
project_urls =
    # Bug Tracker = https://bugs.launchpad.net/nark/
    Documentation = https://nark.readthedocs.io/en/latest/
    Source Code = https://github.com/tallybark/nark
license = GPLv3+
license-file = LICENSE
platform = any
# https://pypi.org/classifiers/
classifier =
    License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
    Development Status :: 5 - Production/Stable
    Intended Audience :: Developers
    Natural Language :: English
    Operating System :: OS Independent
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.5
    Programming Language :: Python
    Topic :: Software Development :: Libraries :: Python Modules
# Keywords for PyPI to display, and to use for search results.
keywords =
    journal
    diary
    timesheet
    timetrack
    jrnl
    rednotebook
    todo.txt
    prjct
    hamster
    fact

[options]
zip_safe = false
# Enable setuptools_scm's use_scm_version.
setup_requires =
    setuptools
    setuptools_scm

[coverage:report]
precision = 0

[coverage:run]
branch = True
source = nark

[doc8]
ignore-path = .eggs/, *.egg-info/, .tox/, docs/_build/
max-line-length = 89
# Specify encoding lest doc8 think it's 'Windows-1254' and raise UnicodeDecodeError.
file-encoding = utf-8
# DEVs: Uncomment verbose for TMI.
#  verbose=1

[flake8]
# So that the user can call `flake8`, maintain an exclude list. (Another way
# to lint is via `make lint` or `tox -e flake8`, which call flake8 on exact
# paths, e.g., `flake8 setup.py source/ tests/`. Here we achieve same effect
# but by doing the opposite, being exclusive rather than inclusive.)
exclude =
    # The build directory, if not ignored, has 50 or so lintable files.
    build/
    # Docs' conf.py is modified Sphinx boilerplate. That does not lint.
    docs/conf.py
    docs/_themes/sphinx_rtd_theme/
    # Not ignoring .eggs adds 10 files.
    .eggs/
    # Not ignoring .tox adds tens of Ks files.
    .tox/
    # These directories don't contain any lintable files for flake8 to
    # find, but ignore them anyway to save whatever time globbing takes.
    dist/
    *.egg-info/
    .git/
    htmlcov/
    .pytest_cache/
    __pycache__
max-line-length = 89
# See list of error codes (we can list here to ignore):
#
#   https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes
#
# - Project-agnostic, universal behavior (that supports and enforces this
#   and similar projects' style guides, i.e., this developer's preferences):
#
#   - ✓ W391: blank line at end of file
#
#       - (lb): Personal preference. So that, e.g., Vim's <C-End> is predictable
#               and goes to first column of an empty last line, rather than to
#               some unknown last column of a nonempty last line.
#
#   - ✓ W503 line break before binary operator
#
#       - (lb): I'm with Knuth, for readability, because columns align.
#
#               Prefer this:
#
#                   if (some_thing
#                       and another
#                       and another_thing):
#
#               over this:
#
#                   if (some_thing and
#                       another and
#                       another_thing):
#
# - Project- and dependency-specific, less common options:
#
#   - ✗ W605 invalid escape sequence:
#
#       - Specific to some Click library usage.
#         - (lb): Was warned on regex, e.g., '\d{2}' was flagged.
#         - (lb): Was warned on escape in Click help string, e.g., 'blah \# blah'.
#
ignore = W391,W503,W605

[isort]
# See: setup.cfg's [flake8] max-line-length = 89.
line_length = 89
# multi_line_output: 3 - Vertical Hanging Indent.
multi_line_output = 3
not_skip = __init__.py
known_third_party =
    # SYNC_ME: setup.py:requirements
    ansi_escape_room
    ansiwrap_hotoffthehamster
    appdirs
    config_decorator
    configobj
    dateparser
    pedantic_timedelta
    icalendar
    iso8601
    lazy_import
    pytz
    regex
    sqlalchemy
    tzlocal
    # Testing packages
    factory
    faker
    fauxfactory
    freezegun
    past
    pytest
    pytest_factoryboy

[tool:pytest]
addopt =
	--tb=short
	--strict
	--rsx

